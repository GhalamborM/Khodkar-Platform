

using System;
using System.Linq;
using System.Net.Http;
using System.Web.Http.Filters;
using KS.Core.GlobalVarioable;
using KS.Core.Model;
using KS.Core.CacheProvider;
using KS.Core.Data.Contexts;

namespace KS.Core.UI.Attribute
{
    public class LogAndCheckCacheOfServiceAttribute : ActionFilterAttribute
    {
        public override void OnActionExecuting(System.Web.Http.Controllers.HttpActionContext actionContext)

        {
            var requestedService = actionContext.Request.RequestUri.AbsolutePath;
            var routeTemplate = actionContext.RequestContext.RouteData.Route.RouteTemplate;
            if (actionContext.RequestContext.RouteData.Values.Count > 0)
            {
                var requestedServiceNormalUrl = requestedService[0] == '/'
                    ? requestedService.Substring(1)
                    : requestedService;
                var lastCharIndex = requestedServiceNormalUrl.Length - 1;
                requestedServiceNormalUrl = requestedServiceNormalUrl[lastCharIndex] == '/'
                    ? requestedServiceNormalUrl.Substring(0, lastCharIndex - 1)
                    : requestedServiceNormalUrl;

                var routeTemplateNormalUrl = routeTemplate[0] == '/'
                    ? routeTemplate.Substring(1)
                    : routeTemplate;
                lastCharIndex = routeTemplateNormalUrl.Length - 1;
                routeTemplateNormalUrl = routeTemplateNormalUrl[lastCharIndex] == '/'
                    ? routeTemplateNormalUrl.Substring(0, lastCharIndex - 1)
                    : routeTemplateNormalUrl;

                var requestedServiceToken = requestedServiceNormalUrl.ToLower().Split('/');
                var routeTemplateToken = routeTemplateNormalUrl.ToLower().Split('/');
                var tokenIndex = 0;
                requestedService = "";

                foreach (var token in routeTemplateToken)
                {

                    if (token == requestedServiceToken[tokenIndex])
                        requestedService += "/" + token;
                    else
                    {
                        requestedService += "/@" + actionContext.RequestContext.RouteData.Values
                                                .Where(rv => token.Contains(rv.Key.ToLower()))
                                                .OrderByDescending(rv => rv.Key.Length)
                                                .FirstOrDefault().Key;
                    }

                    tokenIndex++;
                }
            }

            IAspect aspect;
            var key = requestedService + "-" + ActionKey.RequestService;
            if (CacheManager.Get<IAspect>(key).IsCached)
                aspect = CacheManager.Get<IAspect>(key).Value;
            else
            {
                aspect = DataBaseContextManager.GetAspectForPublicMasterDataKeyValueUrl(requestedService);
                CacheManager.Store(key, aspect, slidingExpiration: TimeSpan.FromMinutes(Config.AspectCacheSlidingExpirationTimeInMinutes));
            }
            if (aspect.EnableLog)
            {
                var actionLogManager = actionContext.Request.GetDependencyScope()
               .GetService(typeof(Log.Base.IActionLogManager)) as Log.Base.IActionLogManager;

                actionLogManager?.LogHttpService(aspect.Name,actionContext.Request,requestedService);
              
            }
        }

        
    }
}
