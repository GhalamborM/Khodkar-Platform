
using System.Linq;
using System.Net.Http;
using System.Web.Http;
using System.Web.Http.Controllers;
using KS.Core.Exceptions;
using KS.Core.GlobalVarioable;
using KS.Core.Security;
using KS.Core.Model;
using KS.Core.Log;

namespace KS.Core.UI.Attribute
{
    public class AuthorizeAndLogAndCheckCacheOfServiceAttribute : AuthorizeAttribute
    {
        //public override async Task OnAuthorizationAsync(HttpActionContext actionContext,
        //    CancellationToken cancellationToken)
        //{
        //    var requestedService = actionContext.Request.RequestUri.AbsolutePath;
        //    var routeTemplate = actionContext.RequestContext.RouteData.Route.RouteTemplate;
        //    if (actionContext.RequestContext.RouteData.Values.Count > 0)
        //    {
        //        var requestedServiceNormalUrl = requestedService[0] == '/'
        //            ? requestedService.Substring(1)
        //            : requestedService;
        //        var lastCharIndex = requestedServiceNormalUrl.Length - 1;
        //        requestedServiceNormalUrl = requestedServiceNormalUrl[lastCharIndex] == '/'
        //            ? requestedServiceNormalUrl.Substring(0, lastCharIndex - 1)
        //            : requestedServiceNormalUrl;

        //        var routeTemplateNormalUrl = routeTemplate[0] == '/'
        //            ? routeTemplate.Substring(1)
        //            : routeTemplate;
        //        lastCharIndex = routeTemplateNormalUrl.Length - 1;
        //        routeTemplateNormalUrl = routeTemplateNormalUrl[lastCharIndex] == '/'
        //            ? routeTemplateNormalUrl.Substring(0, lastCharIndex - 1)
        //            : routeTemplateNormalUrl;

        //        var requestedServiceToken = requestedServiceNormalUrl.ToLower().Split('/');
        //        var routeTemplateToken = routeTemplateNormalUrl.ToLower().Split('/');
        //        var tokenIndex = 0;
        //        requestedService = "";

        //        foreach (var token in routeTemplateToken)
        //        {

        //            if (token == requestedServiceToken[tokenIndex])
        //                requestedService += "/" + token;
        //            else
        //            {
        //                requestedService += "/@" + actionContext.RequestContext.RouteData.Values
        //                                        .Where(rv => token.Contains(rv.Key.ToLower()))
        //                                        .OrderByDescending(rv => rv.Key.Length)
        //                                        .FirstOrDefault().Key;
        //            }

        //            tokenIndex++;
        //        }
        //    }
        //    await AuthorizeManager.AuthorizeUrlAsync(requestedService, ActionKey.RequestService);
        //    await base.OnAuthorizationAsync(actionContext, cancellationToken);
        //}

        //protected override bool IsAuthorized(HttpActionContext actionContext)
        //{

        //    if (!base.IsAuthorized(actionContext)) return false;

        //    var requestedService = actionContext.Request.RequestUri.AbsolutePath;
        //    var routeTemplate = actionContext.RequestContext.RouteData.Route.RouteTemplate;
        //    if (actionContext.RequestContext.RouteData.Values.Count > 0)
        //    {
        //        var requestedServiceNormalUrl = requestedService[0] == '/'
        //            ? requestedService.Substring(1)
        //            : requestedService;
        //        var lastCharIndex = requestedServiceNormalUrl.Length - 1;
        //        requestedServiceNormalUrl = requestedServiceNormalUrl[lastCharIndex] == '/'
        //            ? requestedServiceNormalUrl.Substring(0, lastCharIndex - 1)
        //            : requestedServiceNormalUrl;

        //        var routeTemplateNormalUrl = routeTemplate[0] == '/'
        //            ? routeTemplate.Substring(1)
        //            : routeTemplate;
        //        lastCharIndex = routeTemplateNormalUrl.Length - 1;
        //        routeTemplateNormalUrl = routeTemplateNormalUrl[lastCharIndex] == '/'
        //            ? routeTemplateNormalUrl.Substring(0, lastCharIndex - 1)
        //            : routeTemplateNormalUrl;

        //        var requestedServiceToken = requestedServiceNormalUrl.ToLower().Split('/');
        //        var routeTemplateToken = routeTemplateNormalUrl.ToLower().Split('/');
        //        var tokenIndex = 0;
        //        requestedService = "";

        //        foreach (var token in routeTemplateToken)
        //        {

        //            if (token == requestedServiceToken[tokenIndex])
        //                requestedService += "/" + token;
        //            else
        //            {
        //                requestedService += "/@" + actionContext.RequestContext.RouteData.Values
        //                                        .Where(rv => token.Contains(rv.Key.ToLower()))
        //                                        .OrderByDescending(rv => rv.Key.Length)
        //                                        .FirstOrDefault().Key;
        //            }

        //            tokenIndex++;
        //        }
        //    }
        //    //if(!AuthorizeManager.AuthorizeUrl(requestedService, ActionKey.RequestService))
        //    //    actionContext.Response= new HttpResponseMessage();

        

           
        //    var actionLogManager = actionContext.Request.GetDependencyScope()
        //        .GetService(typeof(IActionLogAdapter)) as IActionLogAdapter;

            
        //    if (actionLogManager == null)
        //    {
        //        var ex = new KhodkarInvalidException("ActionLogAdapter is null");
        //        ErrorLogManager.LogException(new ExceptionLog()
        //        {
        //            Detail = ex.ToString(),
        //            Message = ex.Message,
        //            Source = ex.GetType().FullName
        //        });
        //        throw ex;
        //    }

        //    IAspect aspect;
        //    var result = AuthorizeManager.AuthorizeMasterDataKeyValueUrl(requestedService, ActionKey.RequestService,out aspect);
        //    if (aspect.EnableLog)
        //    {
        //        actionLogManager.LogHttpService(aspect.Name,actionContext.Request, requestedService);
               
        //    }
        //    return result;
        //    //return AuthorizeManager.AuthorizeUrl(requestedService, ActionKey.RequestService);

        //}

        public override void OnAuthorization(HttpActionContext actionContext)
        {
            if (!base.IsAuthorized(actionContext))
                base.HandleUnauthorizedRequest(actionContext);

            var requestedService = actionContext.Request.RequestUri.AbsolutePath;
            var routeTemplate = actionContext.RequestContext.RouteData.Route.RouteTemplate;
            if (actionContext.RequestContext.RouteData.Values.Count > 0)
            {
                var requestedServiceNormalUrl = requestedService[0] == '/'
                    ? requestedService.Substring(1)
                    : requestedService;
                var lastCharIndex = requestedServiceNormalUrl.Length - 1;
                requestedServiceNormalUrl = requestedServiceNormalUrl[lastCharIndex] == '/'
                    ? requestedServiceNormalUrl.Substring(0, lastCharIndex - 1)
                    : requestedServiceNormalUrl;

                var routeTemplateNormalUrl = routeTemplate[0] == '/'
                    ? routeTemplate.Substring(1)
                    : routeTemplate;
                lastCharIndex = routeTemplateNormalUrl.Length - 1;
                routeTemplateNormalUrl = routeTemplateNormalUrl[lastCharIndex] == '/'
                    ? routeTemplateNormalUrl.Substring(0, lastCharIndex - 1)
                    : routeTemplateNormalUrl;

                var requestedServiceToken = requestedServiceNormalUrl.ToLower().Split('/');
                var routeTemplateToken = routeTemplateNormalUrl.ToLower().Split('/');
                var tokenIndex = 0;
                requestedService = "";

                foreach (var token in routeTemplateToken)
                {

                    if (token == requestedServiceToken[tokenIndex])
                        requestedService += "/" + token;
                    else
                    {
                        requestedService += "/@" + actionContext.RequestContext.RouteData.Values
                                                .Where(rv => token.Contains(rv.Key.ToLower()))
                                                .OrderByDescending(rv => rv.Key.Length)
                                                .FirstOrDefault().Key;
                    }

                    tokenIndex++;
                }
            }
            //if(!AuthorizeManager.AuthorizeUrl(requestedService, ActionKey.RequestService))
            //    actionContext.Response= new HttpResponseMessage();




            var actionLogManager = actionContext.Request.GetDependencyScope()
                .GetService(typeof(Log.Base.IActionLogManager)) as Log.Base.IActionLogManager;


            IAspect aspect;
            var result = AuthorizeManager.AuthorizeMasterDataKeyValueUrl(requestedService, ActionKey.RequestService, out aspect);
            if (aspect.EnableLog)
            {
                actionLogManager?.LogHttpService(aspect.Name, actionContext.Request, requestedService);

            }
            if(!result)
                base.HandleUnauthorizedRequest(actionContext);

            base.OnAuthorization(actionContext);
        }
    }
}
